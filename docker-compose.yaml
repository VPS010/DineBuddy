services:
  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      # Define the HTTPS entrypoint on port 443
      - "--entrypoints.websecure.address=:443"
      # Enable automatic certificate generation using TLS challenge
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=dinebuddy.in"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
    ports:
      # Expose only port 443 for HTTPS traffic
      - "443:443"
    volumes:
      # So that Traefik can listen to Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # Persist Let's Encrypt certificates
      - ./letsencrypt:/letsencrypt

  backend:
    build: ./backend
    networks:
      - servitnet
    depends_on:
      - mongoDB

  userfrontend:
    build: ./UserFrontend
    labels:
      - "traefik.enable=true"
      # Only route requests to dinebuddy.in/user/menu to this container
      - "traefik.http.routers.usermenu.rule=Host(`dinebuddy.in`) && PathPrefix(`/user/menu`)"
      # Use the secure entrypoint (443)
      - "traefik.http.routers.usermenu.entrypoints=websecure"
      - "traefik.http.routers.usermenu.priority=10"
      # Use the ACME resolver for SSL certificates
      - "traefik.http.routers.usermenu.tls.certresolver=le"
      - "traefik.http.services.usermenu.loadbalancer.server.port=5173"
    networks:
      - servitnet

  adminfrontend:
    build: ./AdminFrontend
    labels:
      - "traefik.enable=true"
      # Route all requests to dinebuddy.in to this container (if no more specific rule is present)
      - "traefik.http.routers.guestbook.rule=Host(`dinebuddy.in`)"
      # Use the secure entrypoint (443)
      - "traefik.http.routers.guestbook.entrypoints=websecure"
      # Use the ACME resolver for SSL certificates
      - "traefik.http.routers.guestbook.tls.certresolver=le"
      - "traefik.http.services.guestbook.loadbalancer.server.port=5175"
    networks:
      - servitnet

  mongoDB:
    image: mongo:latest
    networks:
      - servitnet
    volumes:
      - mongo-data:/data/db
    # REMOVE PORTS if backend runs in the same network
    # ports:
    #   - "27017:27017"
    deploy:
      mode: replicated
      replicas: 1  # Set to 1 unless using a replica set

networks:
  servitnet:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  letsencrypt:
